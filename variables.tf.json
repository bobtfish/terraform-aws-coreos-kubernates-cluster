{
  "variable": {
    "kubernates-master-user-data": {
      "default": "#cloud-config\n\n---\nwrite_files:\n- path: /opt/bin/waiter.sh\n  owner: root\n  content: |\n    #! /usr/bin/bash\n    until curl http://127.0.0.1:4001/v2/machines; do sleep 2; done\ncoreos:\n  fleet:\n    etcd-servers: http://localhost:4001\n    metadata: \"role=master\"\n  flannel:\n    interface: eth1\n  units:\n    - name: setup-network-environment.service\n      command: start\n      content: |\n        [Unit]\n        Description=Setup Network Environment\n        Documentation=https://github.com/kelseyhightower/setup-network-environment\n        Requires=network-online.target\n        After=network-online.target\n\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /opt/bin\n        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/setup-network-environment\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment\n        ExecStart=/opt/bin/setup-network-environment\n        RemainAfterExit=yes\n        Type=oneshot\n    - name: etcd.service\n      command: start\n      content: |\n        [Unit]\n        Description=etcd\n        Requires=setup-network-environment.service\n        After=setup-network-environment.service\n\n        [Service]\n        EnvironmentFile=/etc/network-environment\n        User=etcd\n        PermissionsStartOnly=true\n        ExecStart=/usr/bin/etcd \\\n        --name $${DEFAULT_IPV4} \\\n        --addr $${DEFAULT_IPV4}:4001 \\\n        --bind-addr 0.0.0.0 \\\n        --cluster-active-size 1 \\\n        --data-dir /var/lib/etcd \\\n        --http-read-timeout 86400 \\\n        --peer-addr $${DEFAULT_IPV4}:7001 \\\n        --snapshot true\n        Restart=always\n        RestartSec=10s\n    - name: etcd-waiter.service\n      command: start\n      content: |\n        [Unit]\n        Description=etcd waiter\n        Wants=network-online.target\n        Wants=etcd.service\n        After=etcd.service\n        After=network-online.target\n        Before=flanneld.service\n\n        [Service]\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/waiter.sh\n        ExecStart=/usr/bin/bash /opt/bin/waiter.sh\n        RemainAfterExit=true\n        Type=oneshot\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Unit]\n            Requires=etcd.service\n            [Service]\n            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{\"Network\":\"10.244.0.0/16\", \"Backend\": {\"Type\": \"vxlan\"}}'\n    - name: docker-cache.service\n      command: start\n      content: |\n        [Unit]\n        Description=Docker cache proxy\n        Requires=early-docker.service\n        After=early-docker.service\n        Before=early-docker.target\n\n        [Service]\n        Restart=always\n        TimeoutStartSec=0\n        RestartSec=5\n        Environment=\"TMPDIR=/var/tmp/\"\n        Environment=\"DOCKER_HOST=unix:///var/run/early-docker.sock\"\n        ExecStartPre=-/usr/bin/docker kill docker-registry\n        ExecStartPre=-/usr/bin/docker rm docker-registry\n        ExecStartPre=/usr/bin/docker pull quay.io/devops/docker-registry:latest\n        # GUNICORN_OPTS is an workaround for\n        # https://github.com/docker/docker-registry/issues/892\n        ExecStart=/usr/bin/docker run --rm --net host --name docker-registry \\\n            -e STANDALONE=false \\\n            -e GUNICORN_OPTS=[--preload] \\\n            -e MIRROR_SOURCE=https://registry-1.docker.io \\\n            -e MIRROR_SOURCE_INDEX=https://index.docker.io \\\n            -e MIRROR_TAGS_CACHE_TTL=1800 \\\n            quay.io/devops/docker-registry:latest\n    - name: docker.service\n      drop-ins:\n        - name: 51-docker-mirror.conf\n          content: |\n            [Unit]\n            # making sure that docker-cache is up and that flanneld finished\n            # startup, otherwise containers won't land in flannel's network...\n            Requires=docker-cache.service flanneld.service\n            After=docker-cache.service flanneld.service\n            [Service]\n            Environment=DOCKER_OPTS='--registry-mirror=http://$private_ipv4:5000'\n    - name: kube-apiserver.service\n      command: start\n      content: |\n        [Unit]\n        Description=Kubernetes API Server\n        Documentation=https://github.com/GoogleCloudPlatform/kubernetes\n        Requires=etcd.service\n        After=etcd.service\n\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /opt/bin\n        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kube-apiserver\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver\n        ExecStart=/opt/bin/kube-apiserver \\\n        --address=0.0.0.0 \\\n        --port=8080 \\\n        --portal_net=10.100.0.0/16 \\\n        --etcd_servers=http://127.0.0.1:4001 \\\n        --public_address_override=$private_ipv4 \\\n        --logtostderr=true\n        Restart=always\n        RestartSec=10\n    - name: kube-controller-manager.service \n      command: start\n      content: |\n        [Unit]\n        Description=Kubernetes Controller Manager\n        Documentation=https://github.com/GoogleCloudPlatform/kubernetes\n        Requires=kube-apiserver.service\n        After=kube-apiserver.service\n\n        [Service]\n        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kube-controller-manager\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager\n        ExecStart=/opt/bin/kube-controller-manager \\\n        --master=127.0.0.1:8080 \\\n        --logtostderr=true\n        Restart=always\n        RestartSec=10\n    - name: kube-scheduler.service\n      command: start\n      content: |\n        [Unit]\n        Description=Kubernetes Scheduler\n        Documentation=https://github.com/GoogleCloudPlatform/kubernetes\n        Requires=kube-apiserver.service\n        After=kube-apiserver.service\n\n        [Service]\n        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kube-scheduler\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler\n        ExecStart=/opt/bin/kube-scheduler --master=127.0.0.1:8080\n        Restart=always\n        RestartSec=10\n    - name: kube-register.service\n      command: start\n      content: |\n        [Unit]\n        Description=Kubernetes Registration Service\n        Documentation=https://github.com/kelseyhightower/kube-register\n        Requires=kube-apiserver.service\n        After=kube-apiserver.service\n        Requires=fleet.service\n        After=fleet.service\n\n        [Service]\n        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/kube-register\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-register\n        ExecStart=/opt/bin/kube-register \\\n        --metadata=role=node \\\n        --fleet-endpoint=unix:///var/run/fleet.sock \\\n        --api-endpoint=http://127.0.0.1:8080\n        Restart=always\n        RestartSec=10\n  update:\n    group: alpha\n    reboot-strategy: off\n"
    },
    "kubernates-node-user-data": {
      "default": "#cloud-config\n\ncoreos:\n  fleet:\n    etcd-servers: http://<master-private-ip>:4001\n    metadata: \"role=node\"\n  flannel:\n    interface: eth1\n    etcd_endpoints: http://<master-private-ip>:4001\n  units:\n    - name: etcd.service\n      mask: true\n    - name: fleet.service\n      command: start\n    - name: flanneld.service\n      command: start\n      drop-ins:\n        - name: 50-network-config.conf\n          content: |\n            [Service]\n            ExecStartPre=/bin/bash -c \"until curl http://<master-private-ip>:4001/v2/machines; do sleep 2; done\"\n            ExecStartPre=/usr/bin/etcdctl set /coreos.com/network/config '{\"Network\":\"10.244.0.0/16\", \"Backend\": {\"Type\": \"vxlan\"}}'\n    - name: docker.service\n      command: start\n      drop-ins:\n        - name: 51-docker-mirror.conf\n          content: |\n            [Unit]\n            # making sure that flanneld finished startup, otherwise containers\n            # won't land in flannel's network...\n            Requires=flanneld.service\n            After=flanneld.service\n            [Service]\n            Environment=DOCKER_OPTS='--registry-mirror=http://<master-private-ip>:5000'\n    - name: setup-network-environment.service\n      command: start\n      content: |\n        [Unit]\n        Description=Setup Network Environment\n        Documentation=https://github.com/kelseyhightower/setup-network-environment\n        Requires=network-online.target\n        After=network-online.target\n\n        [Service]\n        ExecStartPre=-/usr/bin/mkdir -p /opt/bin\n        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/setup-network-environment\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment\n        ExecStart=/opt/bin/setup-network-environment\n        RemainAfterExit=yes\n        Type=oneshot\n    - name: kube-proxy.service\n      command: start\n      content: |\n        [Unit]\n        Description=Kubernetes Proxy\n        Documentation=https://github.com/GoogleCloudPlatform/kubernetes\n        Requires=setup-network-environment.service\n        After=setup-network-environment.service\n\n        [Service]\n        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kube-proxy\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy\n        ExecStart=/opt/bin/kube-proxy \\\n        --master=http://<master-private-ip>:8080 \\\n        --logtostderr=true\n        Restart=always\n        RestartSec=10\n    - name: kube-kubelet.service\n      command: start\n      content: |\n        [Unit]\n        Description=Kubernetes Kubelet\n        Documentation=https://github.com/GoogleCloudPlatform/kubernetes\n        Requires=setup-network-environment.service\n        After=setup-network-environment.service\n\n        [Service]\n        EnvironmentFile=/etc/network-environment\n        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kubelet\n        ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet\n        ExecStart=/opt/bin/kubelet \\\n        --address=0.0.0.0 \\\n        --port=10250 \\\n        --hostname_override=$private_ipv4 \\\n        --api_servers=<master-private-ip>:8080 \\\n        --logtostderr=true\n        Restart=always\n        RestartSec=10\n  update:\n    group: alpha\n    reboot-strategy: off\n"
    }
  }
}
